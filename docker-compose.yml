version: "3.8"

services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=livekit
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - livekit
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    restart: unless-stopped
    networks:
      - livekit

  coturn:
    image: instrumentisto/coturn:4.5
    restart: unless-stopped
    ports:
      - "3478:3478"     # TURN/TCP
      - "3478:3478/udp" # TURN/UDP
    environment:
      - REALM=viken.stream
      - LISTENING_IP=0.0.0.0
      - EXTERNAL_IP=77.246.103.197
      - LT_CRED_MECH=longterm
      - STATIC_SECRET=super_long_secure_secret_here
    networks:
      - livekit

  livekit:
    image: livekit/livekit-server:latest
    depends_on:
      - redis
      - coturn
    environment:
      - LIVEKIT_REDIS_URL=redis://redis:6379/0
      - LIVEKIT_KEYS=${LIVEKIT_KEYS}
      - LIVEKIT_RTC_UDP_PORT=50000
      - LIVEKIT_RTC_TCP_PORT=7881
      - LIVEKIT_RTC_PORT_RANGE_START=50000
      - LIVEKIT_RTC_PORT_RANGE_END=51000
    ports:
      - "7880:7880"  # HTTP port
      - "7881:7881"  # RTC TCP port
      - "7882:7882/udp"
    networks:
      - livekit
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7880/"]
      timeout: 5s
      retries: 3
      start_period: 10s

  token-server:
    build: ./token-server
    depends_on:
      livekit:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      - LIVEKIT_URL=${LIVEKIT_URL}
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=postgresql://user:password@postgres:5432/livekit
    ports:
      - "8000:8000"
    volumes:
      - ./www:/srv/www
    networks:
      - livekit
    restart: unless-stopped

  caddy:
    image: caddy:2
    depends_on:
      - livekit
      - token-server
    ports:
      - "8080:80"
      - "8443:8443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./www:/srv/www
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - livekit
    restart: unless-stopped

networks:
  livekit:
    driver: bridge

volumes:
  postgres_data:
  caddy_data:
  caddy_config: